## Environment variables
env:
  role: control_plane

  database: "postgres"
  pg_host: kongpg-postgresql.pg.svc.cluster.local
  pg_user: kong
  pg_database: kong
  pg_password: kong
  admin_api_uri: http://manager.example.com:8011
  admin_gui_url: http://manager.example.com:8012
  portal_api_url: http://manager.example.com:8013
  portal_gui_host: http://manager.example.com:8014
  portal_gui_protocol: http
  kong_password: kalidass
  
  #lua_ssl_trusted_certificate: /etc/secrets/kong-cluster-cert/tls.crt
  lua_ssl_trusted_certificate: /etc/secrets/kong-ssl-cert/tls.crt
  lua_ssl_verify_depth: 1
  log_level: notice
  
  # SSL certs settings for HTTPS Admin APIss
  admin_ssl_cert_key: /etc/secrets/kong-ssl-cert/tls.key
  admin_ssl_cert: /etc/secrets/kong-ssl-cert/tls.crt

  # SSL certs settings for HTTPS Manager
  admin_gui_ssl_cert_key: /etc/secrets/kong-ssl-cert/tls.key
  admin_gui_ssl_cert: /etc/secrets/kong-ssl-cert/tls.crt

  # SSL certs settings for HTTPS Portal
  portal_gui_ssl_cert_key: /etc/secrets/kong-ssl-cert/tls.key
  portal_gui_ssl_cert: /etc/secrets/kong-ssl-cert/tls.crt

  # SSL certs settings for HTTPS Portal API
  portal_api_ssl_cert_key: /etc/secrets/kong-ssl-cert/tls.key
  portal_api_ssl_cert: /etc/secrets/kong-ssl-cert/tls.crt

  # Cluster certs settings for CP-DP
  # shared mode
  #cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
  #cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  # pki mode
  #cluster_mtls: "pki"
  #cluster_cert: /etc/secrets/kong-control-plane-cert/tls.crt
  #cluster_cert_key: /etc/secrets/kong-control-plane-cert/tls.key
  #cluster_ca_cert: /etc/secrets/kong-ca-cert/tls.crt
  # pki_check_cn mode - only allows specific CN from data plane
  cluster_mtls: "pki_check_cn"
  cluster_cert: /etc/secrets/kong-control-plane-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-control-plane-cert/tls.key
  cluster_ca_cert: 
    valueFrom:
      secretKeyRef:
        name: kong-ca-cert
        key: ca-cert.pem
  cluster_allowed_common_names: dp1.example.com,dp2.example.com

  anonymous_reports: "off"
  untrusted_lua: "off"
  password:
    valueFrom:
      secretKeyRef:
        name: kong-enterprise-superuser-password
        key: password
  
  portal_auth: basic-auth
  #portal_auth: key-auth
  #portal_auth: openid-connect
  
  portal_auth_conf:
    valueFrom:
      secretKeyRef:
        name: kong-auth-conf
        key: portal_auth_conf
  portal_session_conf:
    valueFrom:
      secretKeyRef:
        name: kong-session-conf
        key: portal_session_conf

  # admin_gui_session_conf:
  #   valueFrom:
  #     secretKeyRef:
  #       name: kong-session-conf
  #       key: admin_gui_session_conf

## Kong version
image:
  repository: kong/kong-gateway
  tag: 3.4.1.0-rhel
  pullPolicy: IfNotPresent
# Specify Kong admin API service and listener configuration
admin:
  enabled: true
  type: LoadBalancer
  annotations:
    kubernetes.io/ingress.class: alb
    konghq.com/protocol: "http"
  http:
    enabled: true
    servicePort: 8011
    containerPort: 8011
    parameters: []
  tls:
    enabled: false
    servicePort: 8454
    containerPort: 8454
    parameters:
      - http2
      - ssl
  ingress:
    enabled: false
## Kong Manager    
manager:
  enabled: true
  type: LoadBalancer
  annotations:
    kubernetes.io/ingress.class: alb
    konghq.com/protocol: "http"
  http:
    enabled: true
    servicePort: 8012
    containerPort: 8012
    parameters: []
  tls:
    enabled: false
    servicePort: 8455
    containerPort: 8455
    parameters:
      - http2
      - ssl
  ingress:
    enabled: false
    # hostname: manager.local.lan
    # annotations: 
    #   kubernetes.io/ingress.class: kong
    #   konghq.com/protocols: https
    # tls:
    #   kong-ssl-cert
  externalIPs: []
## Portal 
portal:
  enabled: true
  type: LoadBalancer
  annotations:
    kubernetes.io/ingress.class: alb
    konghq.com/protocol: "http"
  http:
    enabled: true
    servicePort: 8013
    containerPort: 8013
    parameters: []
  tls:
    enabled: false
    servicePort: 8456
    containerPort: 8456
    parameters:
      - http2
      - ssl
  ingress:
    enabled: false
  externalIPs: []
## Portal API
portalapi:
  enabled: true
  type: LoadBalancer
  annotations:
    kubernetes.io/ingress.class: alb
    konghq.com/protocol: "http"
  http:
    enabled: true
    servicePort: 8014
    containerPort: 8014
    parameters: []
  tls:
    enabled: false
    servicePort: 8457
    containerPort: 8457
    parameters:
      - http2
      - ssl
  ingress:
    enabled: false
  externalIPs: []
proxy:
  enabled: false
## cluster address for DP to talk to
cluster:
  enabled: true
  type: ClusterIP
  annotations: {}
  tls:
    enabled: true
    servicePort: 8015
    containerPort: 8015
    parameters: []
  externalIPs: []
## cluster telemetry address for DP to talk to
clustertelemetry:
  enabled: true
  type: ClusterIP
  annotations: {}
  tls:
    enabled: true
    servicePort: 8016
    containerPort: 8016
    parameters: []
  externalIPs: []
## internal status endpoint
status:
  http:
    enabled: true
    containerPort: 8200
## enterprise features
enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  vitals:
    enabled: true
  portal:
    enabled: true
  rbac:
    enabled: true
    admin_gui_auth: basic-auth
    session_conf_secret: kong-session-conf
    admin_gui_auth_conf_secret: kong-auth-conf
## No Ingress controller
ingressController:
  enabled: false
## mount screts
secretVolumes:
  # - kong-cluster-cert
  - kong-ssl-cert
  - kong-ca-cert
  - kong-control-plane-cert
##
waitImage:
  pullPolicy: IfNotPresent
  lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "/bin/sleep 15 && kong quit"]
## Servie monitor for premetheus operator
#new one
serviceMonitor:
  enabled: true
